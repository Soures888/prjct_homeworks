# Redis configuration file

###############
# GENERAL
###############

# By default Redis binds to all the interfaces. Specify the IP to bind to, using 0.0.0.0 for all interfaces.
bind 0.0.0.0

# Specify the server port.
port 6379

# Daemonize mode. If you run Redis from upstart or systemd, Redis can interact with your supervision tree.
# Just set 'daemonize' to 'no', and it will also log to stderr.
daemonize no

# If running in daemonize mode, Redis will write a pid file in /var/run/redis.pid by default.
pidfile /var/run/redis.pid

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
daemonize no

# When a child rewrites the AOF file, if the following option is enabled the file will be fsync-ed every 32 MB of data generated.
# This is useful in order to commit the file to the disk more incrementally and avoid big latency spikes.
aof-rewrite-incremental-fsync yes

###############
# NETWORK
###############

# By default, if no "bind" configuration directive is specified, Redis listens for connections from all available network interfaces.
# Specify the interfaces you want to listen to here.
bind 0.0.0.0

# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

# TCP keepalive.
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence of communication.
tcp-keepalive 300

###############
# SNAPSHOTTING
###############

# Save the DB on disk:
# save <seconds> <changes>
# Will save the DB if both the given number of seconds and the given number of write operations against the dataset occurred.
# By default Redis will save the dataset every 15 minutes if at least 1 key changed.
# You can disable saving at all commenting all the "save" lines.
save 900 1
save 300 10
save 60 10000

###############
# REPLICATION
###############

# Master/Replica replication. Use replicaof to make a Redis instance a copy of another Redis server.
# A few things to understand ASAP about Redis replication.
# 1) Redis replication is asynchronous, but you can configure a master to stop accepting writes if it appears to be not connected with at least N replicas.
# 2) Redis replicas are able to perform a partial resynchronization with the master if the replication link is lost for a relatively small amount of time.
# 3) You can configure a replica to accept writes, but writing against a replica will cause data to be discarded, because the replica will resynchronize with the master.

# If the master is password protected (using the "requirepass" configuration directive below) it is possible to tell the replica to authenticate before starting the replication
# just setting the masterauth configuration directive in the replica configuration, or in the CLI directly.
# masterauth <master-password>

# When a Redis replica loses its connection with the master, or when the replication is still in progress, the replica can act in two different ways:
# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will still reply to client requests, possibly with out of date data, or the data set may be incomplete.
# 2) If replica-serve-stale-data is set to 'no' the replica will reply with an error "SYNC with master in progress" to all the kind of commands, but:

# In the default configuration Redis does not use username and password for authentication,
# to enable authentication please uncomment the following lines, and then remember to configure
# the client library to supply the username and password or the password alone, if no username
# is required.
# user default on +@all ~* >foobared
# requirepass foobared

# Add more configurations according to your needs

